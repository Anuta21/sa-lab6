from faulthandler import disable
import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import numpy as np
from plotting import make_graph_fig, make_eigval_plot, make_impulse_fig
from cognitive import CognitiveMap

st.set_page_config(
    page_title='–°–ê –õ–†6', 
    page_icon='üìà',
    layout='wide',
    menu_items={
        'About': '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞ ‚Ññ6 –∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É. –í–∏–∫–æ–Ω–∞–ª–∏ –±—Ä–∏–≥–∞–¥–∏ 1 —Ç–∞ 2 –∑ –ö–ê-81: –ì–∞–ª–≥–∞–Ω–æ–≤ –û–ª–µ–∫—Å—ñ–π, –Ñ—Ä–∫–æ –ê–Ω–¥—Ä—ñ–π, –§–æ—Ä–¥—É–π –ù—ñ–∫—ñ—Ç–∞, –ë–∏–ª–∏–º –ö–∏—Ä–∏–ª–æ, –ü—ñ–¥–≤–∞–ª—å–Ω–∞ –ê–Ω–Ω–∞, –Ø–∫–æ–≤–∏–Ω–∞ –ê–Ω–¥—Ä—ñ–π.'
    })

st.title('–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–≥–Ω—ñ—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è')

# data_cols = st.columns([2,1,1,1])
# data_file = data_cols[0].file_uploader('–§–∞–π–ª –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö', type=['csv'], key='input_file')
# col_sep = data_cols[1].selectbox('–†–æ–∑–¥—ñ–ª—é–≤–∞—á –∫–æ–ª–æ–Ω–æ–∫ –¥–∞–Ω–∏—Ö', ('–∫–æ–º–∞', '–ø—Ä–æ–±—ñ–ª', '—Å–∏–º–≤–æ–ª —Ç–∞–±—É–ª—è—Ü—ñ—ó'), key='col_sep')
# dec_sep = data_cols[2].selectbox('–†–æ–∑–¥—ñ–ª—é–≤–∞—á –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏', ('–∫—Ä–∞–ø–∫–∞', '–∫–æ–º–∞'), key='dec_sep')

data = pd.read_csv('data.csv', delimiter=',', decimal='.', index_col=0)

feature_names = data['–Ω–∞–∑–≤–∞'].to_list()
data = data.reset_index().drop(columns=['–Ω–∞–∑–≤–∞'])

builder = GridOptionsBuilder.from_dataframe(data)
builder.configure_default_column(
    resizable=False, filterable=False, editable=True,
    sorteable=False, groupable=False
)
builder.configure_column('index', header_name='—Ñ–∞–∫—Ç–æ—Ä', editable=False)
builder.configure_grid_options(
    autoSizePadding=1
)
grid_options = builder.build()

col1, col2 = st.columns(spec=[2.5, 2])
with col1:
    reload_data = False
    if col1.button('–°–∫–∏–Ω—É—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –º–∞—Ç—Ä–∏—Ü—ñ', key='reset_edit'):
        reload_data = True

    grid_return = AgGrid(
        data, grid_options,
        reload_data=reload_data, 
        update_mode=GridUpdateMode.VALUE_CHANGED
    )
    reload_data = False

    df = grid_return['data']
    df_to_save = df.copy()
    df_to_save['–Ω–∞–∑–≤–∞'] = feature_names
    df_to_save.to_csv('data_edit.csv', index=False)

with col2:
    M = df.values[:, 1:].astype(float)
    fig = make_graph_fig(M, feature_names)
    col2.plotly_chart(fig)
    cogn_map = CognitiveMap(M, df.columns.to_list()[1:])

st.header('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç—ñ–π–∫—ñ—Å—Ç—å')

stab_cols = st.columns(3)
stab_cols[0].write('–í–ª–∞—Å–Ω—ñ —á–∏—Å–ª–∞:')
stab_cols[0].plotly_chart(make_eigval_plot(cogn_map.getEigenvalues()))

spectral_radius = cogn_map.getSpectralRadius(cogn_map.getAdjMatrx())
even_cycles = cogn_map.getEvenCycles()
even_cycles.sort(key=len, reverse=True)
number_of_even_cycles = len(even_cycles)
stab_cols[1].write(f'–°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∏–π —Ä–∞–¥—ñ—É—Å $R$: **{spectral_radius:.5f}**.')
stab_cols[1].write(f'–°—Ç—ñ–π–∫—ñ—Å—Ç—å –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º ($R < 1$): **' + ('—Ç–∞–∫' if spectral_radius < 1 else '–Ω—ñ') + '**.')
stab_cols[1].write(f'–°—Ç—ñ–π–∫—ñ—Å—Ç—å –∑–∞ –∑–±—É—Ä–µ–Ω–Ω—è–º ($R \leq 1$): **' + ('—Ç–∞–∫' if spectral_radius <= 1 else '–Ω—ñ') + '**.')
stab_cols[1].write(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤: **{number_of_even_cycles}**.')
stab_cols[2].write('–°–ø–∏—Å–æ–∫ –ø–∞—Ä–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤:')
stab_cols[2].text_area(
    '',
    value='\n'.join(
        [' ‚Üí '.join([str(i+1) for i in cycle] + [str(cycle[0]+1)]) for cycle in even_cycles]
    ), height=300, disabled=True
)

st.header('–Ü–º–ø—É–ª—å—Å–Ω–µ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è')
impulse_cols = st.columns([1, 4])
q = []
for i in range(M.shape[0]):
    q.append(
        impulse_cols[0].number_input(f'q_{i+1}', 
        min_value=-5.0, max_value=5.0, value=0.0,
        step=1.0, key=f'q_{i}')
    )

iter_count = impulse_cols[1].number_input(
    '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π', min_value=1, max_value=20,
    value=5, step=1, key='iter_count'
)

if impulse_cols[1].button('–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è', key='run_impulse'):
    res = cogn_map.impulse_model(init_q=q, steps=iter_count)
    impulse_plot_fig = make_impulse_fig(res, cogn_map.node_names)
    impulse_cols[1].plotly_chart(impulse_plot_fig)